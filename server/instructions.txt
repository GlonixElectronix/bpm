# Django REST API: Complete Usage Guide

## 1. Running the Server
- Apply migrations and start the server:

    python manage.py migrate
    python manage.py runserver

- The server will be available at http://localhost:8000/

## 2. User Management (Admin Only)
- Create a superuser:

    python manage.py createsuperuser

- Visit http://localhost:8000/admin/ and log in.
- Add users via the Django admin interface (no public registration endpoint).

## 3. Authentication (JWT)
- Obtain a JWT token:

    POST /api/auth/token/
    {
        "username": "<username>",
        "password": "<password>"
    }

- Response:
    {
        "refresh": "<refresh_token>",
        "access": "<access_token>"
    }

- Use the access token in the Authorization header for all API requests:

    Authorization: Bearer <access_token>

- Refresh the access token:

    POST /api/auth/token/refresh/
    {
        "refresh": "<refresh_token>"
    }

- Response:
    {
        "access": "<new_access_token>"
    }

## 4. API Endpoints (CRUD)

### Customers
- List:      GET    /api/customers/
- Create:    POST   /api/customers/
- Retrieve:  GET    /api/customers/{id}/
- Update:    PUT    /api/customers/{id}/
- Delete:    DELETE /api/customers/{id}/

#### Customer Fields
- customer_type: "business" or "individual" (default: business)
- salutation: "dr", "mr", "ms", "mrs" (optional)
- first_name, last_name: string (optional)
- company_name: string (optional)
- display_name: string (required)
- email: string (required, unique)
- work_phone, mobile: string (optional)
- pan: string (optional)
- currency: "AED", "AUD", "BND", "CAD", "CNY", "EUR", "GBP", "INR", "JPY", "SAR", "USD", "ZAR" (default: INR)
- opening_balance: decimal (default: 0)
- payment_terms: "due_on_receipt", "net_7", "net_15", "net_30", "net_45" (default: due_on_receipt)
- documents: array of CustomerDocument objects (max 10, each â‰¤10MB)
- billing_*: address fields (attention, country, street1, street2, city, state, pin_code, phone, fax)
- shipping_*: address fields (same as billing)
- contact_persons: array of ContactPerson objects (see below)
- custom_fields: key-value pairs (JSON)
- tags: array of strings
- remarks: string (optional)

#### CustomerDocument Fields
- id: integer
- file: file URL
- uploaded_at: datetime

#### ContactPerson Fields
- id: integer
- salutation: "dr", "mr", "ms", "mrs" (optional)
- first_name, last_name: string
- email: string
- work_phone, mobile: string (optional)

#### Example: Create Customer
POST /api/customers/
Content-Type: application/json
Authorization: Bearer <access_token>

{
  "customer_type": "business",
  "salutation": "mr",
  "first_name": "John",
  "last_name": "Doe",
  "company_name": "Acme Corp",
  "display_name": "Acme Corp (John Doe)",
  "email": "john.doe@acme.com",
  "work_phone": "1234567890",
  "mobile": "9876543210",
  "pan": "ABCDE1234F",
  "currency": "INR",
  "opening_balance": "1000.00",
  "payment_terms": "net_30",
  "billing_attention": "Accounts",
  "billing_country": "India",
  "billing_street1": "123 Main St",
  "billing_street2": "Suite 100",
  "billing_city": "Mumbai",
  "billing_state": "MH",
  "billing_pin_code": "400001",
  "billing_phone": "0221234567",
  "billing_fax": "0227654321",
  "shipping_attention": "Warehouse",
  "shipping_country": "India",
  "shipping_street1": "456 Warehouse Rd",
  "shipping_street2": "",
  "shipping_city": "Mumbai",
  "shipping_state": "MH",
  "shipping_pin_code": "400002",
  "shipping_phone": "0229876543",
  "shipping_fax": "0223456789",
  "custom_fields": {"GSTIN": "27ABCDE1234F1Z5"},
  "tags": ["priority", "2025"],
  "remarks": "Important customer"
}

#### Example: Retrieve Customer (with nested documents and contact persons)
GET /api/customers/1/
Authorization: Bearer <access_token>

Response:
{
  "id": 1,
  "customer_type": "business",
  "salutation": "mr",
  "first_name": "John",
  "last_name": "Doe",
  "company_name": "Acme Corp",
  "display_name": "Acme Corp (John Doe)",
  "email": "john.doe@acme.com",
  "work_phone": "1234567890",
  "mobile": "9876543210",
  "pan": "ABCDE1234F",
  "currency": "INR",
  "opening_balance": "1000.00",
  "payment_terms": "net_30",
  "documents": [
    {"id": 1, "file": "/media/customer_documents/doc1.pdf", "uploaded_at": "2025-08-27T10:00:00Z"}
  ],
  "billing_attention": "Accounts",
  "billing_country": "India",
  "billing_street1": "123 Main St",
  "billing_street2": "Suite 100",
  "billing_city": "Mumbai",
  "billing_state": "MH",
  "billing_pin_code": "400001",
  "billing_phone": "0221234567",
  "billing_fax": "0227654321",
  "shipping_attention": "Warehouse",
  "shipping_country": "India",
  "shipping_street1": "456 Warehouse Rd",
  "shipping_street2": "",
  "shipping_city": "Mumbai",
  "shipping_state": "MH",
  "shipping_pin_code": "400002",
  "shipping_phone": "0229876543",
  "shipping_fax": "0223456789",
  "contact_persons": [
    {"id": 1, "salutation": "ms", "first_name": "Jane", "last_name": "Smith", "email": "jane@acme.com", "work_phone": "", "mobile": ""}
  ],
  "custom_fields": {"GSTIN": "27ABCDE1234F1Z5"},
  "tags": ["priority", "2025"],
  "remarks": "Important customer",
  "created_at": "2025-08-27T10:00:00Z"
}

### Vendors
- List:      GET    /api/vendors/
- Create:    POST   /api/vendors/
- Retrieve:  GET    /api/vendors/{id}/
- Update:    PUT    /api/vendors/{id}/
- Delete:    DELETE /api/vendors/{id}/


### Invoices
- List:      GET    /api/invoices/
- Create:    POST   /api/invoices/
- Retrieve:  GET    /api/invoices/{id}/
- Update:    PUT    /api/invoices/{id}/
- Delete:    DELETE /api/invoices/{id}/

#### Invoice Fields
- customer: Customer object (from Customers endpoint)
- invoice_number: string (required, unique)
- order_number: string (optional)
- invoice_date: date (YYYY-MM-DD)
- item_details: array of InvoiceItem objects (see below)
- customer_notes: string (optional)
- terms_and_conditions: string (optional)
- total_amount: decimal
- files: array of CustomerDocument objects (uploaded files)
- created_at: datetime

#### InvoiceItem Fields
- id: integer
- item: Item object (from Items endpoint, read-only)
- item_id: integer (write-only)
- quantity: integer
- rate: decimal
- amount: decimal (read-only)

#### Example: Create Invoice
POST /api/invoices/
Content-Type: application/json
Authorization: Bearer <access_token>

{
    "customer_id": 1,
    "invoice_number": "INV-2025-001",
    "order_number": "ORD-123",
    "invoice_date": "2025-08-30",
    "customer_notes": "Thank you for your business.",
    "terms_and_conditions": "Payment due in 30 days.",
    "total_amount": "15000.00",
    "file_ids": [1, 2]
}

#### Example: Retrieve Invoice (with nested item details and files)
GET /api/invoices/1/
Authorization: Bearer <access_token>

Response:
{
    "id": 1,
    "customer": { ... },
    "invoice_number": "INV-2025-001",
    "order_number": "ORD-123",
    "invoice_date": "2025-08-30",
    "item_details": [
        {"id": 1, "item": { ... }, "quantity": 2, "rate": "5000.00", "amount": "10000.00"}
    ],
    "customer_notes": "Thank you for your business.",
    "terms_and_conditions": "Payment due in 30 days.",
    "total_amount": "15000.00",
    "files": [ {"id": 1, "file": "...", "uploaded_at": "..."} ],
    "created_at": "2025-08-30T10:00:00Z"
}

### Items
- List:      GET    /api/items/
- Create:    POST   /api/items/
- Retrieve:  GET    /api/items/{id}/
- Update:    PUT    /api/items/{id}/
- Delete:    DELETE /api/items/{id}/

### Payments
- List:      GET    /api/payments/
- Create:    POST   /api/payments/
- Retrieve:  GET    /api/payments/{id}/
- Update:    PUT    /api/payments/{id}/
- Delete:    DELETE /api/payments/{id}/

### Quotes
- List:      GET    /api/quotes/
- Create:    POST   /api/quotes/
- Retrieve:  GET    /api/quotes/{id}/
- Update:    PUT    /api/quotes/{id}/
- Delete:    DELETE /api/quotes/{id}/

#### Quote Fields
- customer: Customer object (from Customers endpoint)
- quote_number: string (required, unique)
- reference_number: string (optional)
- quote_date: date (YYYY-MM-DD)
- expiry_date: date (YYYY-MM-DD)
- salesperson: string (optional)
- project_name: string (optional)
- subject: string (optional)
- item_details: array of QuoteItem objects (see below; structure is identical to ProformaInvoiceItem)
- customer_notes: string (optional)
- terms_and_conditions: string (optional)
- subtotal: decimal
- discount: decimal (percentage, e.g. 10.00 for 10%)
- tax_type: "TDS" or "TCS" (default: TDS)
- tax_percentage: "0", "5", "12", "18", "28" (default: "0")
- adjustment: decimal
- total_amount: decimal
- status: "draft", "sent", "accepted", "rejected", "expired" (default: draft)
- created_at: datetime

#### QuoteItem / ProformaInvoiceItem Fields (identical)
- id: integer
- item: Item object (from Items endpoint, read-only)
- item_id: integer (write-only)
- quantity: integer
- rate: decimal
- amount: decimal (read-only)

#### Example: Create Quote
POST /api/quotes/
Content-Type: application/json
Authorization: Bearer <access_token>

{
  "customer_id": 1,
  "quote_number": "Q-2025-001",
  "reference_number": "REF-123",
  "quote_date": "2025-08-27",
  "expiry_date": "2025-09-10",
  "salesperson": "Alice Smith",
  "project_name": "Project X",
  "subject": "Quotation for Project X",
  "customer_notes": "Please review and confirm.",
  "terms_and_conditions": "Payment within 30 days.",
  "subtotal": "10000.00",
  "discount": "5.00",
  "tax_type": "TDS",
  "tax_percentage": "5",
  "adjustment": "-100.00",
  "total_amount": "9500.00"
}

#### Example: Retrieve Quote (with nested item details)
GET /api/quotes/1/
Authorization: Bearer <access_token>

Response:
{
  "id": 1,
  "customer": { ... },
  "quote_number": "Q-2025-001",
  "reference_number": "REF-123",
  "quote_date": "2025-08-27",
  "expiry_date": "2025-09-10",
  "salesperson": "Alice Smith",
  "project_name": "Project X",
  "subject": "Quotation for Project X",
  "item_details": [
    {"id": 1, "item": { ... }, "quantity": 2, "rate": "5000.00", "amount": "10000.00"}
  ],
  "customer_notes": "Please review and confirm.",
  "terms_and_conditions": "Payment within 30 days.",
  "subtotal": "10000.00",
  "discount": "5.00",
  "tax_type": "TDS",
  "tax_percentage": "5",
  "adjustment": "-100.00",
  "total_amount": "9500.00",
  "status": "draft",
  "created_at": "2025-08-27T10:00:00Z"
}

### Proforma Invoices

#### ProformaInvoice Fields
- subtotal: decimal
- discount: decimal (percentage, e.g. 10.00 for 10%)
### Invoice File Attachments

There are two ways to attach files to an Invoice:

1. **UI-uploaded files**: Use the `files` field (multipart/form-data) to upload new files directly when creating or updating an invoice.
2. **Programmatic attachment**: Use the `invoice_file_ids` field to attach existing `CustomerDocument` files by their IDs. This does not upload new files, but links already-uploaded documents to the invoice.

**Example: Attach files by ID (programmatic)**

```
POST /api/invoices/
{
    ...
    "invoice_file_ids": [1, 2, 3]
}
```

**Note:**
- `files` and `invoice_file_ids` are distinct. `files` is for uploading new files; `invoice_file_ids` is for attaching existing files.
- Both fields can be used independently or together as needed.

#### Example: Create Proforma Invoice
POST /api/proforma-invoices/
Content-Type: application/json
Authorization: Bearer <access_token>

{
  "customer_id": 1,
  "invoice_number": "P-2025-001",
  "reference_number": "REF-456",
  "invoice_date": "2025-08-30",
  "expiry_date": "2025-09-15",
  "salesperson": "Bob Jones",
  "project_name": "Project Y",
  "subject": "Proforma Invoice for Project Y",
  "customer_notes": "Please process this proforma invoice.",
  "terms_and_conditions": "Payment within 15 days.",
  "subtotal": "20000.00",
  "discount": "10.00",
  "tax_type": "TDS",
  "tax_percentage": "12",
  "adjustment": "-500.00",
  "total_amount": "17500.00"
}

#### Example: Retrieve Proforma Invoice (with nested item details)
GET /api/proforma-invoices/1/
Authorization: Bearer <access_token>

Response:
{
  "id": 1,
  "customer": { ... },
  "invoice_number": "P-2025-001",
  "reference_number": "REF-456",
  "invoice_date": "2025-08-30",
  "expiry_date": "2025-09-15",
  "salesperson": "Bob Jones",
  "project_name": "Project Y",
  "subject": "Proforma Invoice for Project Y",
  "item_details": [
    {"id": 1, "item": { ... }, "quantity": 3, "rate": "5000.00", "amount": "15000.00"}
  ],
  "customer_notes": "Please process this proforma invoice.",
  "terms_and_conditions": "Payment within 15 days.",
  "subtotal": "20000.00",
  "discount": "10.00",
  "tax_type": "TDS",
  "tax_percentage": "12",
  "adjustment": "-500.00",
  "total_amount": "17500.00",
  "status": "draft",
  "created_at": "2025-08-30T10:00:00Z"
}

### Delivery Challans
- List:      GET    /api/delivery-challans/
- Create:    POST   /api/delivery-challans/
- Retrieve:  GET    /api/delivery-challans/{id}/
- Update:    PUT    /api/delivery-challans/{id}/
- Delete:    DELETE /api/delivery-challans/{id}/

### Inventory Adjustments
- List:      GET    /api/inventory-adjustments/
- Create:    POST   /api/inventory-adjustments/
- Retrieve:  GET    /api/inventory-adjustments/{id}/
- Update:    PUT    /api/inventory-adjustments/{id}/
- Delete:    DELETE /api/inventory-adjustments/{id}/

## 5. Example Requests (All Resources)

### Customers
- Create:
    POST /api/customers/
    {
        "name": "Acme Corp",
        "email": "info@acme.com",
        "company_name": "Acme Corporation",
        "address": "123 Main St",
        "phone": "1234567890"
    }
- Update:
    PUT /api/customers/1/
    {
        "name": "Acme Corp Updated",
        "email": "info@acme.com",
        "company_name": "Acme Corporation",
        "address": "456 Main St",
        "phone": "1234567890"
    }
- Retrieve:
    GET /api/customers/1/
- Delete:
    DELETE /api/customers/1/

### Vendors
- Create:
    POST /api/vendors/
    {
        "name": "Vendor Inc",
        "email": "vendor@example.com",
        "company_name": "Vendor Incorporated",
        "address": "456 Vendor St",
        "phone": "9876543210"
    }
- Update:
    PUT /api/vendors/1/
    {
        "name": "Vendor Inc Updated",
        "email": "vendor@example.com",
        "company_name": "Vendor Incorporated",
        "address": "789 Vendor Ave",
        "phone": "9876543210"
    }
- Retrieve:
    GET /api/vendors/1/
- Delete:
    DELETE /api/vendors/1/

### Invoices
- Create:
    POST /api/invoices/
    {
        "customer_id": 1,
        "invoice_number": "INV-1001",
        "date": "2025-08-24",
        "due_date": "2025-09-24",
        "amount": "500.00",
        "status": "draft",
        "notes": "First invoice"
    }
- Update:
    PUT /api/invoices/1/
    {
        "customer_id": 1,
        "invoice_number": "INV-1001",
        "date": "2025-08-24",
        "due_date": "2025-09-24",
        "amount": "600.00",
        "status": "sent",
        "notes": "Updated invoice"
    }
- Retrieve:
    GET /api/invoices/1/
- Delete:
    DELETE /api/invoices/1/

### Items
- Create:
    POST /api/items/
    {
        "name": "Item 1",
        "description": "A sample item",
        "price": "10.00",
        "sku": "SKU001"
    }
- Update:
    PUT /api/items/1/
    {
        "name": "Item 1 Updated",
        "description": "Updated description",
        "price": "12.00",
        "sku": "SKU001"
    }
- Retrieve:
    GET /api/items/1/
- Delete:
    DELETE /api/items/1/

### Payments
- Create:
    POST /api/payments/
    {
        "invoice_id": 1,
        "amount": "500.00",
        "date": "2025-08-25",
        "method": "Bank Transfer",
        "notes": "Full payment received"
    }
- Update:
    PUT /api/payments/1/
    {
        "invoice_id": 1,
        "amount": "600.00",
        "date": "2025-08-26",
        "method": "Credit Card",
        "notes": "Updated payment"
    }
- Retrieve:
    GET /api/payments/1/
- Delete:
    DELETE /api/payments/1/

### Quotes
- Create:
    POST /api/quotes/
    {
        "customer_id": 1,
        "quote_number": "Q-1001",
        "date": "2025-08-24",
        "valid_until": "2025-09-01",
        "amount": "1000.00",
        "status": "draft",
        "notes": "First quote"
    }
- Update:
    PUT /api/quotes/1/
    {
        "customer_id": 1,
        "quote_number": "Q-1001",
        "date": "2025-08-24",
        "valid_until": "2025-09-01",
        "amount": "1200.00",
        "status": "sent",
        "notes": "Updated quote"
    }
- Retrieve:
    GET /api/quotes/1/
- Delete:
    DELETE /api/quotes/1/

### Proforma Invoices
- Create:
    POST /api/proforma-invoices/
    {
        "customer_id": 1,
        "proforma_number": "P-1001",
        "date": "2025-08-24",
        "due_date": "2025-09-24",
        "amount": "1500.00",
        "status": "draft",
        "notes": "First proforma"
    }
- Update:
    PUT /api/proforma-invoices/1/
    {
        "customer_id": 1,
        "proforma_number": "P-1001",
        "date": "2025-08-24",
        "due_date": "2025-09-24",
        "amount": "1600.00",
        "status": "sent",
        "notes": "Updated proforma"
    }
- Retrieve:
    GET /api/proforma-invoices/1/
- Delete:
    DELETE /api/proforma-invoices/1/


### Delivery Challans
- List:      GET    /api/delivery-challans/
- Create:    POST   /api/delivery-challans/
- Retrieve:  GET    /api/delivery-challans/{id}/
- Update:    PUT    /api/delivery-challans/{id}/
- Delete:    DELETE /api/delivery-challans/{id}/

#### DeliveryChallan Fields
- customer: Customer object (from Customers endpoint)
- challan_number: string (required, unique)
- reference_number: string (optional)
- date: date (YYYY-MM-DD)
- challan_type: "liquid_gas", "job_work", "approval", "others" (enum)
- item_details: array of DeliveryChallanItem objects (see below)
- total_amount: decimal
- created_at: datetime

#### DeliveryChallanItem Fields
- id: integer
- item: Item object (from Items endpoint, read-only)
- item_id: integer (write-only)
- quantity: integer
- rate: decimal
- amount: decimal (read-only)

#### Example: Create Delivery Challan
POST /api/delivery-challans/
Content-Type: application/json
Authorization: Bearer <access_token>

{
    "customer_id": 1,
    "challan_number": "DC-2025-001",
    "reference_number": "REF-789",
    "date": "2025-08-30",
    "challan_type": "liquid_gas",
    "total_amount": "20000.00"
}

#### Example: Retrieve Delivery Challan (with nested item details)
GET /api/delivery-challans/1/
Authorization: Bearer <access_token>

Response:
{
    "id": 1,
    "customer": { ... },
    "challan_number": "DC-2025-001",
    "reference_number": "REF-789",
    "date": "2025-08-30",
    "challan_type": "liquid_gas",
    "item_details": [
        {"id": 1, "item": { ... }, "quantity": 5, "rate": "4000.00", "amount": "20000.00"}
    ],
    "total_amount": "20000.00",
    "created_at": "2025-08-30T10:00:00Z"
}

### Inventory Adjustments
- Create:
    POST /api/inventory-adjustments/
    {
        "item_id": 1,
        "adjustment_number": "ADJ-1001",
        "date": "2025-08-24",
        "quantity": 10,
        "reason": "Stock count correction",
        "notes": "Initial adjustment"
    }
- Update:
    PUT /api/inventory-adjustments/1/
    {
        "item_id": 1,
        "adjustment_number": "ADJ-1001",
        "date": "2025-08-24",
        "quantity": 12,
        "reason": "Correction",
        "notes": "Updated adjustment"
    }
- Retrieve:
    GET /api/inventory-adjustments/1/
- Delete:
    DELETE /api/inventory-adjustments/1/

### Bills
- List:      GET    /api/bills/
- Create:    POST   /api/bills/
- Retrieve:  GET    /api/bills/{id}/
- Update:    PUT    /api/bills/{id}/
- Delete:    DELETE /api/bills/{id}/

#### Bill Fields
- vendor: nested Vendor object (read-only)
- vendor_id: integer (required, write-only)
- bill_number: string (required, unique)
- reference_number: string (optional)
- status: "PAID", "UNPAID", "PARTIAL", "DRAFT" (default: DRAFT)
- bill_date: date (required)
- due_date: date (required)
- notes: string (optional)
- subtotal: decimal (auto, read-only)
- tax: decimal (auto, read-only)
- total_amount: decimal (auto, read-only)
- item_details: array of BillItem objects (read-only)
- files: array of CustomerDocument objects (read-only)
- file_ids: array of integers (write-only, optional)
- created_at: datetime (read-only)

#### BillItem Fields
- id: integer
- item: nested Item object (read-only)
- item_id: integer (required, write-only)
- quantity: integer (required)
- rate: decimal (required)
- tax_percentage: decimal (optional, default 0)
- amount: decimal (auto, read-only)

#### Example: Create Bill
POST /api/bills/
Content-Type: application/json
Authorization: Bearer <access_token>

{
    "vendor_id": 1,
    "bill_number": "BILL-2025-001",
    "reference_number": "REF-123",
    "status": "DRAFT",
    "bill_date": "2025-09-01",
    "due_date": "2025-09-15",
    "notes": "First bill for vendor.",
    "file_ids": [1, 2]
}

#### Example: Retrieve Bill (with nested item details and files)
GET /api/bills/1/
Authorization: Bearer <access_token>

Response:
{
    "id": 1,
    "vendor": {"id": 1, "name": "Acme Supplies", ...},
    "bill_number": "BILL-2025-001",
    "reference_number": "REF-123",
    "status": "DRAFT",
    "bill_date": "2025-09-01",
    "due_date": "2025-09-15",
    "notes": "First bill for vendor.",
    "subtotal": "1000.00",
    "tax": "180.00",
    "total_amount": "1180.00",
    "item_details": [
        {"id": 1, "item": {"id": 1, "name": "Widget", ...}, "quantity": 10, "rate": "100.00", "tax_percentage": "18.00", "amount": "1000.00"}
    ],
    "files": [
        {"id": 1, "file": "/media/customer_documents/bill1.pdf", "uploaded_at": "2025-09-01T10:00:00Z"}
    ],
    "created_at": "2025-09-01T10:00:00Z"
}

#### Example: Add Bill Items (separate endpoint or nested creation not shown; use admin or custom endpoint if needed)

#### Example: Upload Bill Files
POST /api/customer-documents/
Content-Type: multipart/form-data
Authorization: Bearer <access_token>

file: <file>


### Files (Uploaded Documents)

#### Endpoints
- List:      GET    /api/files/
- Upload:    POST   /api/files/ (multipart/form-data)
- Retrieve:  GET    /api/files/{id}/
- Update:    PUT    /api/files/{id}/ (multipart/form-data)
- Delete:    DELETE /api/files/{id}/

#### Description
- Upload, update, download, and manage files (PDF, JPG, etc) for use with Customers, Invoices, Bills, etc.
- Files are uploaded once and can be associated with multiple business objects by their ID.
- Requires authentication (JWT access token).

#### File Fields
- id: integer (auto)
- file: file (required for POST/PUT; PDF, JPG, PNG, DOC, XLS, etc)
- uploaded_at: datetime (auto)


#### Example: Upload a PDF File
POST /api/files/
Authorization: Bearer <access_token>
Content-Type: multipart/form-data

file: <attach a PDF file, e.g. invoice.pdf>

Response:
{
    "id": 1,
    "file": "/media/customer_documents/invoice.pdf",
    "uploaded_at": "2025-08-30T12:00:00Z"
}


#### Example: Upload a JPG File
POST /api/files/
Authorization: Bearer <access_token>
Content-Type: multipart/form-data

file: <attach a JPG file, e.g. receipt.jpg>

Response:
{
    "id": 2,
    "file": "/media/customer_documents/receipt.jpg",
    "uploaded_at": "2025-08-30T12:01:00Z"
}


#### Example: Update/Replace a File (PUT)
PUT /api/files/1/
Authorization: Bearer <access_token>
Content-Type: multipart/form-data

file: <attach a new PDF or JPG file>

Response:
{
    "id": 1,
    "file": "/media/customer_documents/new_invoice.pdf",
    "uploaded_at": "2025-08-30T12:05:00Z"
}

#### Example: Download/View a File
GET /api/files/1/
Authorization: Bearer <access_token>

Response: (file stream, e.g. PDF, JPG, etc)

#### Example: Delete a File
DELETE /api/files/1/
Authorization: Bearer <access_token>

#### Error Cases
- 400: Invalid file type or size
- 404: File not found
- 401: Unauthorized

#### Associating Files with Other Objects
- When creating/updating Customers, Invoices, or Bills, use the `file_ids` field to associate uploaded files:

    "file_ids": [1, 2]

#### UI Notes
- Always upload the file first, then use the returned ID to associate with other objects.

### Profit and Loss Report
- GET /api/reports/profit-and-loss/?time=This%20Month|Last%20Month|This%20Year&basis=Accrual|Cash&compare_with=None|Last%20Month|Last%20Year
- Returns a real-time Profit and Loss report for the specified period, basis, and optional comparison.
- Requires authentication (JWT access token).

#### Query Parameters
- time: string (This Month, Last Month, This Year; default: This Month)
- basis: string (Accrual or Cash; default: Accrual)
- compare_with: string (None, Last Month, Last Year; default: None)
- customer_id: integer (optional)
- summary_only: boolean (optional, default: false). If true, omits invoice_breakdown and bill_breakdown for faster summary-only response.

#### Output Fields (Updated)
- operating_income: Total sales/invoice amount for the period
- cost_of_goods_sold: Total bill amount (COGS) for the period
- gross_profit: operating_income - cost_of_goods_sold
- operating_expense: (currently 0, can be split from bills in future)
- operating_profit: gross_profit - operating_expense
- non_operating_income: (currently 0)
- non_operating_expense: (currently 0)
- net_profit_loss: operating_profit + non_operating_income - non_operating_expense
- payments_received: Total payments received for the period
- invoice_breakdown: List of invoices in the period
- bill_breakdown: List of bills in the period

#### Sample Output
{
  "period": "This Month",
  "basis": "Accrual",
  "start_date": "2025-08-01",
  "end_date": "2025-08-31",
  "report": {
    "operating_income": 15000.0,
    "cost_of_goods_sold": 8000.0,
    "gross_profit": 7000.0,
    "operating_expense": 0.0,
    "operating_profit": 7000.0,
    "non_operating_income": 0.0,
    "non_operating_expense": 0.0,
    "net_profit_loss": 7000.0,
    "payments_received": 12000.0,
    "invoice_breakdown": [ ... ],
    "bill_breakdown": [ ... ]
  },
  "compare_with": "Last Month",
  "compare_report": {
    ...same structure as report...
  }
}

#### Response
{
  "period": "This Month",
  "basis": "Accrual",
  "start_date": "2025-08-01",
  "end_date": "2025-08-31",
  "report": {
    "income": 15000.0,
    "payments_received": 12000.0,
    "expenses": 8000.0,
    "profit": 7000.0,
    "loss": 0.0,
    "invoice_breakdown": [ ... ],
    "bill_breakdown": [ ... ]
  },
  "compare_with": "Last Month",
  "compare_report": {
    ...same structure as report...
  }
}

#### Error Cases
- 400: Invalid time parameter
- 401: Unauthorized

#### Notes
- The report is always up to date with all CRUD changes to Invoices, Bills, and Payments.

## 6. Background Pre-Aggregation (Performance Optimization)

### DailySummary Table
- The system maintains a `DailySummary` table with daily totals for invoices, bills, and payments.
- This is updated automatically every 24 hours using a background task (django-background-tasks).
- You can also trigger pre-aggregation manually from the Django admin (DailySummary > Actions > Run daily pre-aggregation now).

### How it works
- On Django startup, the background task is scheduled if not already present.
- The task runs every 24 hours and updates/creates daily summary rows for all dates in the data.
- You can also run the task manually from the admin or by calling `python3 manage.py process_tasks` in a terminal.

### Monitoring
- The `DailySummary` table is visible in the Django admin for review and manual triggering.
- The background task queue can be monitored with `python3 manage.py process_tasks` (should be running in production).

### Dependencies
- Uses the `django-background-tasks` package for scheduling and running background jobs.

## 7. Admin Integration
- The Django admin interface is used for managing users, viewing reports, and triggering background tasks.
- Admin URL: http://localhost:8000/admin/

### DailySummary Admin
- Accessible under "Reports" > "Daily Summaries".
- View, search, and filter daily summary records.
- Manually trigger pre-aggregation from the admin actions.

### User Management
- Admins can create, update, and delete users.
- Passwords are hashed; use Django's password management commands for resets.

### Permissions
- Admins have full access; other users have limited access based on assigned permissions.
- Customize permissions in the Django admin under "Users" and "Groups".

### Custom Admin Actions
- Custom actions can be added for bulk updates or other batch operations.
- Example: Marking multiple invoices as sent.

### Logging and Monitoring
- Admins can view logs of background tasks, including any errors or retries.
- Monitor system performance and task durations for optimization.

### Security
- Admin interface is protected by Django's authentication and permission system.
- Use strong passwords and restrict admin access to trusted IPs or networks.

### Customization
- The admin interface can be customized with custom views, filters, and actions.
- Example: A custom dashboard widget for quick stats.

### Documentation
- Refer to Django's admin documentation for detailed customization and usage instructions.

## Quotes Endpoint: File Attachment Support


Quotes and Proforma Invoices now support attaching files via the quote_file_ids and proforma_invoice_file_ids fields, respectively. These fields accept an array of file IDs from the file upload endpoint (/api/files/).

### Example: Create Quote with Files
POST /api/quotes/
Content-Type: application/json
Authorization: Bearer <access_token>

{
    "customer_id": 1,
    "quote_number": "Q-2025-002",
    "quote_date": "2025-09-04",
    "expiry_date": "2025-09-10",
    "item_details": [ ... ],
    "quote_file_ids": [1, 2, 3]
}

### Example: Create Proforma Invoice with Files
POST /api/proforma-invoices/
Content-Type: application/json
Authorization: Bearer <access_token>

{
    "customer_id": 1,
    "invoice_number": "P-2025-001",
    "invoice_date": "2025-08-30",
    "expiry_date": "2025-09-15",
    "item_details": [ ... ],
    "proforma_invoice_file_ids": [1, 2, 3]
}

- The files must be uploaded first using the file upload endpoint.
- Only the IDs are required; file objects are not returned in the quote or proforma invoice response.